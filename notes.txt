
### Code Best Pratcises
1.  Routes are defined in module specific constants which should not be hard coded. (So Changing Routes will be Easier at one place)
2.  Read Environment specific variable from node Environment which should not be in code.
3.  Keep Middle Ware like Express in WebLayer only and pass computed context object to DAL (data access layer) .Reference https://raw.githubusercontent.com/i0natan/nodebestpractices/master/assets/images/keepexpressinweb.gif


###  Javascript Code Style Guide  ###

functionNamesLikeThis
variableNamesLikeThis
ClassNamesLikeThis
EnumNamesLikeThis
methodNamesLikeThis
CONSTANT_VALUES_LIKE_THIS
foo.namespaceNamesLikeThis.bar
filenameslikethis.js.

### Test your code TDD ###
unit testing , integration testing , e2e testing

### Worker 

crown Worker


### Messaging Queue Sending Mail From Quew

RabbitMQ


#### Ignore Git Node Modeules 
touch .gitignore && echo "node_modules/" >> .gitignore

### Aync Library
https://www.npmjs.com/package/co

### Middle Ware Injection

Really very useful before your route handler gets executed.
Path Specific middle ware Injection
Example in Some Path if you want db data at pre execution before route handler it is helpful.

function dbMiddleware (req, res, next) {
  getFromDb(req.params.id) //see app.get below
  .then(function(data) {
    req.dbData = data
    next()
  })
  .catch(function (error) {
    res.status(500).end() //replace with proper error handling
  })
}
app.get('/data/:id', [dbMiddleware], handler)


### Used for User Logging status

function logMiddleware (req, res, next) {
  logLastActiveAt(req.user.id, new Date())
  next()
}
app.use(userMiddleware)
app.use(logMiddleware)
app.get('/someroute', handler)


#####################
Run Scripts

Use npm run commandname

#### Errors defining standards and status code ####

https://cloud.google.com/storage/docs/json_api/v1/status-codes


#### Postgress Environment Variables 
    "pgsql.connection": "postgres://power_user:poweruserpassword@ec2-13-127-170-233.ap-south-1.compute.amazonaws.com:5432/postgres"

  PGUSER=power_user \
  PGHOST=ec2-13-127-170-233.ap-south-1.compute.amazonaws.com \
  PGPASSWORD=poweruserpassword \
  PGDATABASE=postgres \
  PGPORT=5432 \
  npm run runPgScript

### node postgree tutorial

https://node-postgres.com/features/queries
  
### init script app.js with environment variables

PGUSER=power_user \
PGHOST=ec2-13-127-170-233.ap-south-1.compute.amazonaws.com \
PGPASSWORD=poweruserpassword \
PGDATABASE=postgres \
PGPORT=5432 \
NODE_ENV=development \
NODE_HOST=ec2-13-127-170-233.ap-south-1.compute.amazonaws.com \
index.js

### Run using babel for async await support
PGUSER=power_user \
PGHOST=ec2-13-127-170-233.ap-south-1.compute.amazonaws.com \
PGPASSWORD=poweruserpassword \
PGDATABASE=postgres \
PGPORT=5432 \
NODE_ENV=development \
NODE_HOST=ec2-13-127-170-233.ap-south-1.compute.amazonaws.com \
npm run runByBabel



### VSCODE EXTENSIONS

code alignment - beautify
code standards - javascript standard
node intellisense - npm intellisense

### Error Handling Node js

https://www.joyent.com/node-js/production/design/errors

### pm2 Useful commands
pm2 start index.js
pm2 show <id|name>` to get more details about an app
pm2 start processes.json
pm2 start app.js --watch

### Node Version Manager nvm

nvm install --lts   //v8.11.3
nvm install 6.1.0


### Debugging Node using nvm 
Change your launch confog
"runtimeExecutable": "/Users/ecom-s.prem/.nvm/versions/node/v8.11.3/bin/node"


### code intellisense for our Library Format  ###

..  For Object Datatypes and custom things follow this format  ..  
/** @description Adds api routes and handler
 * @param {} {Object} { path :'path_to_route' , callback : 'your_route_callback' }
 * @return {null}
 */

..  For In Built Datatypes  follow this format   ..  

 /** @description Adds api routes and handler
 * @param {string} { path :'path_to_route' , callback : 'your_route_callback' }
 * @return {string}
 */

 ### Login system security  ###

https://stackoverflow.com/questions/549/the-definitive-guide-to-form-based-website-authentication

1. CSRF attack prevention F/E B/E 
https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)
Knowing Trusted site Url format and in maliculous site do some trusted site re direction script with Url.So if user 
is already authenticated it gets compromised

.... prevention steps ....

CSRF token
Referer Header

https://stackoverflow.com/questions/5207160/what-is-a-csrf-token-what-is-its-importance-and-how-does-it-work


---------------------


2.SSL,HTTPS -> 

client side password encryption -> Password -> hash+salt -> encrypt

---------------------
3.XSS attack prevention for cookie session 

https://en.wikipedia.org/wiki/Cross-site_scripting -> XSS Attack
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection

4. Securing Rest api

https://medium.freecodecamp.org/securing-node-js-restful-apis-with-json-web-tokens-9f811a92bb52

5. Http Only cookie

https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies

6. Two-Factor Authentication and Authentication Providers
http://openid.net/connect/
https://kantarainitiative.org/confluence/display/uma/Home

7. Sanitization
looking for form content contains any maliculous code 
====

Techniques for Security
=============================

Authenticaton = user register/Login  ( Techniques -> hashing+salt ) (Develepment -> F/E & B/E)
Authorisation = grant access to resource (Techniques -> Token JWT)  (Development -> B/E)
CSRF Attack Prevention = csrf token + referrer header validation  (Development -> B/E & F/E)
Access control allow origin list - "*.water.com" etc., (Development -> B/E)
Http only cookie
==============================

Techniques for Logging
==============================

nginx - request id header for logging api errors 
https://www.nginx.com/blog/application-tracing-nginx-plus/




=================

Headers 

x-water-api-jwt // api authentication token
x-water-csrf-token // csrf  Prevention
X-Request-ID  // api logging nginx
X-XSS-Protection: 1; mode=block // xss attack prevention 
// nginx -> add_header "X-XSS-Protection" "1; mode=block"; Ref XSS attack 2nd link

?? questions

1. csutom middleware for api and other validation