This Week 

https://trac.osgeo.org/postgis/wiki/UsersWikiPostGIS21Ubuntu1204src
https://stackoverflow.com/questions/17915928/error-when-installing-postgis-extension-to-postgresql-database
https://stackoverflow.com/questions/50823092/cannot-build-rgdal-package-on-amazon-linux-ami

check ld_librartpath

Finally narrow down  problem
==========================
have to resolve 
ERROR:  could not access file "$libdir/rtpostgis-2.1": No such file or directory



changes
sudo nano ld.so.conf
include ld.so.conf.d/*.conf -> include /etc/ld.so.conf.d/*.conf
======

solve 

22-sep-2018
-------------

1. F/E analyse how ola categorises location like street , land mark.
2. Geo

13.1170107,80.249128
13.6,80.3
13.7,82.2
14.5,83.3   
14.2,84.4


21-sep-2018 [backlog]
=================

Log File name Change is not affected for second log.
Solution:
Look for problem in winston lib or use add / remove method provided by winston for that level log


15-september-2018
==================

Implementation
===============
Express error handling. // over need to do logic stuff like log error,mail send , error type// ok
Express Log Route Errors to table to have more details on route specific errors
Querying Logs using Winston logger//
Program errors + operational errors logging using winston //
Logging Service should be singleton so needed component should inject without passing reference //ok
Log Req/Res using nginx and nginx header implementation

Note: If querying log is possible no need for table logging. we can get from file itself.


Desired Results:
================
1. client can able to get information about specific api error by telling this header id.
2. Facilitates to track any Middleware error happened in a application
3. Program errors vs operational errors can be classified
4. Route Specific errors can be analysed and resolved so error rate will be reduced to zero

1-sep-2018

Idea Arrived
-------------
Resolve error in running node app
Change Router argument with next callback support to handle router errors at middle ware injection level.
Express error middleware router should be implemented and winston logger should be logged there.
Prepare shell script for all commands sequence.[to install and run program]
Study nginx request-id logger for http and application tracking.
Update swagger documentation for completed model.




20-August-2018
=================
1. check for pm2 node environment variables undefinde or look for node forever all commands // done with forever


==================

21-august-2018

https://github.com/Unitech/pm2/issues/2302 - progress for watch not working
Tried below need to check why restaring
 ----------
$ npm install pm2@next -g
$ pm2-dev start ecosystem.json

======

22-august-2018

progress for pm2 watch not working ?

1. Error handling node js best practise and implemenation generally & winston  logger
2. forever check for restart app on crash
3. split component specific errors and common errors


10-August-2018

middleware and back end agenda

1. node sql utility class complete.
2. db designer import to pgadmin and correct composite key.
2. schema local and aws update.
3. scripts for sql and api.
4. Update api documentation after successful api method.
5. How to do entity standards.
6. Tell rule to rajkamal for db standards and import from dbdesigner.
    # lowercase underscore rule
    # dbdesigner create column and do in pgadmin

-----------------




sample json form input -> back end get with body parser,cookie parser
sample json form input -> back end get with body parser,cookie parser // completed
index.js -> conf,server function in one file should be break down // completed 
jwt token service // completed
custom middleware service for api input and header validation , request sanitization(jwt token validation, csrf token validation, xss validation)

where to store token on client



// login

1.login logout -> cookie session
2.cookie security session security
3.persistent login

======================
2. cookie security session security

server side session is encrypted and sent it to the client
so browser cookie will have encrypted data . it can be read as it is
session secret -> input appid-any-non-guessable-thing -> hashed value so cant be predictable
hash+salt also we can use
f(x) -> y
x - unpredictable mostly
======================

cookie based vs token based authentication 

1. token is best prepare token with self contained data 
2. token based is scalable as it not stays in ram like session
3. no need to send username,password through cookie each time //
4. 
=======
Where to Store Tokens?
With token-based auth, you are given the choice of where to store the JWT. Commonly, the JWT is placed in the browser's local storage and this works well for most use cases. There are some issues with storing JWTs in local storage to be aware of. Unlike cookies, local storage is sandboxed to a specific domain and its data cannot be accessed by any other domain including sub-domains.
You can store the token in a cookie instead, but the max size of a cookie is only 4kb so that may be problematic if you have many claims attached to the token. Additionally, you can store the token in session storage which is similar to local storage but is cleared as soon as the user closes the browser.



what i will learn
Full Stack Developer
---------------------

Aws 
Node js 
React 
angular 
postgress
html,css,js

---------------------