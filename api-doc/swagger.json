{
    "swagger": "2.0",
    "info": {
       "description": "This is a Water Can Project api documentation.\n",
       "version": "1.0.0",
       "title": "Water Can Api",
       "termsOfService": "http://ec2-13-127-170-233.ap-south-1.compute.amazonaws.com/terms/",
       "contact": {
          "email": "way2startup@gmail.com1"
       },
       "license": {
          "name": "Apache 2.0",
          "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
       }
    },
    "tags": [
       {
          "name": "water",
          "description": "Everything about your booking a water",
          "externalDocs": {
             "description": "Find out more",
             "url": "http://swagger.io"
          }
       },
       {
          "name": "store",
          "description": "Access to waterstore orders"
       },
       {
          "name": "user",
          "description": "Operations about user",
          "externalDocs": {
             "description": "Find out more about our store",
             "url": "http://swagger.io"
          }
       }
    ],
    "paths": {
       "/water": {
          "post": {
             "tags": [
                "water"
             ],
             "summary": "Add a new water to the store",
             "operationId": "addwater",
             "consumes": [
                "application/json",
                "application/xml"
             ],
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "body",
                   "description": "water object that needs to be added to the store",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/water"
                   }
                }
             ],
             "responses": {
                "405": {
                   "description": "Invalid input"
                }
             },
             "security": [
                {
                   "waterstore_auth": [
                      "write:waters",
                      "read:waters"
                   ]
                }
             ]
          },
          "put": {
             "tags": [
                "water"
             ],
             "summary": "Update an existing water",
             "operationId": "updatewater",
             "consumes": [
                "application/json",
                "application/xml"
             ],
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "body",
                   "description": "water object that needs to be added to the store",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/water"
                   }
                }
             ],
             "responses": {
                "400": {
                   "description": "Invalid ID supplied"
                },
                "404": {
                   "description": "water not found"
                },
                "405": {
                   "description": "Validation exception"
                }
             },
             "security": [
                {
                   "waterstore_auth": [
                      "write:waters",
                      "read:waters"
                   ]
                }
             ]
          }
       },
       "/water/findByStatus": {
          "get": {
             "tags": [
                "water"
             ],
             "summary": "Finds waters by status",
             "description": "Multiple status values can be provided with comma separated strings",
             "operationId": "findwatersByStatus",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "name": "status",
                   "in": "query",
                   "description": "Status values that need to be considered for filter",
                   "required": true,
                   "type": "array",
                   "items": {
                      "type": "string",
                      "enum": [
                         "available",
                         "pending",
                         "sold"
                      ],
                      "default": "available"
                   },
                   "collectionFormat": "multi"
                }
             ],
             "responses": {
                "200": {
                   "description": "successful operation",
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/water"
                      }
                   }
                },
                "400": {
                   "description": "Invalid status value"
                }
             },
             "security": [
                {
                   "waterstore_auth": [
                      "write:waters",
                      "read:waters"
                   ]
                }
             ]
          }
       },
       "/water/findByTags": {
          "get": {
             "tags": [
                "water"
             ],
             "summary": "Finds waters by tags",
             "description": "Muliple tags can be provided with comma separated strings. Use\\\n\\ tag1, tag2, tag3 for testing.",
             "operationId": "findwatersByTags",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "name": "tags",
                   "in": "query",
                   "description": "Tags to filter by",
                   "required": true,
                   "type": "array",
                   "items": {
                      "type": "string"
                   },
                   "collectionFormat": "multi"
                }
             ],
             "responses": {
                "200": {
                   "description": "successful operation",
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/water"
                      }
                   }
                },
                "400": {
                   "description": "Invalid tag value"
                }
             },
             "security": [
                {
                   "waterstore_auth": [
                      "write:waters",
                      "read:waters"
                   ]
                }
             ],
             "deprecated": true
          }
       },
       "/water/{waterId}": {
          "get": {
             "tags": [
                "water"
             ],
             "summary": "Find water by ID",
             "description": "Returns a single water",
             "operationId": "getwaterById",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "name": "waterId",
                   "in": "path",
                   "description": "ID of water to return",
                   "required": true,
                   "type": "integer",
                   "format": "int64"
                }
             ],
             "responses": {
                "200": {
                   "description": "successful operation",
                   "schema": {
                      "$ref": "#/definitions/water"
                   }
                },
                "400": {
                   "description": "Invalid ID supplied"
                },
                "404": {
                   "description": "water not found"
                }
             },
             "security": [
                {
                   "api_key": []
                }
             ]
          },
          "post": {
             "tags": [
                "water"
             ],
             "summary": "Updates a water in the store with form data",
             "operationId": "updatewaterWithForm",
             "consumes": [
                "application/x-www-form-urlencoded"
             ],
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "name": "waterId",
                   "in": "path",
                   "description": "ID of water that needs to be updated",
                   "required": true,
                   "type": "integer",
                   "format": "int64"
                },
                {
                   "name": "name",
                   "in": "formData",
                   "description": "Updated name of the water",
                   "required": false,
                   "type": "string"
                },
                {
                   "name": "status",
                   "in": "formData",
                   "description": "Updated status of the water",
                   "required": false,
                   "type": "string"
                }
             ],
             "responses": {
                "405": {
                   "description": "Invalid input"
                }
             },
             "security": [
                {
                   "waterstore_auth": [
                      "write:waters",
                      "read:waters"
                   ]
                }
             ]
          },
          "delete": {
             "tags": [
                "water"
             ],
             "summary": "Deletes a water",
             "operationId": "deletewater",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "name": "api_key",
                   "in": "header",
                   "required": false,
                   "type": "string"
                },
                {
                   "name": "waterId",
                   "in": "path",
                   "description": "water id to delete",
                   "required": true,
                   "type": "integer",
                   "format": "int64"
                }
             ],
             "responses": {
                "400": {
                   "description": "Invalid ID supplied"
                },
                "404": {
                   "description": "water not found"
                }
             },
             "security": [
                {
                   "waterstore_auth": [
                      "write:waters",
                      "read:waters"
                   ]
                }
             ]
          }
       },
       "/water/{waterId}/uploadImage": {
          "post": {
             "tags": [
                "water"
             ],
             "summary": "uploads an image",
             "operationId": "uploadFile",
             "consumes": [
                "multipart/form-data"
             ],
             "produces": [
                "application/json"
             ],
             "parameters": [
                {
                   "name": "waterId",
                   "in": "path",
                   "description": "ID of water to update",
                   "required": true,
                   "type": "integer",
                   "format": "int64"
                },
                {
                   "name": "additionalMetadata",
                   "in": "formData",
                   "description": "Additional data to pass to server",
                   "required": false,
                   "type": "string"
                },
                {
                   "name": "file",
                   "in": "formData",
                   "description": "file to upload",
                   "required": false,
                   "type": "file"
                }
             ],
             "responses": {
                "200": {
                   "description": "successful operation",
                   "schema": {
                      "$ref": "#/definitions/ApiResponse"
                   }
                }
             },
             "security": [
                {
                   "waterstore_auth": [
                      "write:waters",
                      "read:waters"
                   ]
                }
             ]
          }
       },
       "/store/inventory": {
          "get": {
             "tags": [
                "store"
             ],
             "summary": "Returns water inventories by status",
             "description": "Returns a map of status codes to quantities",
             "operationId": "getInventory",
             "produces": [
                "application/json"
             ],
             "parameters": [],
             "responses": {
                "200": {
                   "description": "successful operation",
                   "schema": {
                      "type": "object",
                      "additionalProperties": {
                         "type": "integer",
                         "format": "int32"
                      }
                   }
                }
             },
             "security": [
                {
                   "api_key": []
                }
             ]
          }
       },
       "/store/order": {
          "post": {
             "tags": [
                "store"
             ],
             "summary": "Place an order for a water",
             "operationId": "placeOrder",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "body",
                   "description": "order placed for purchasing the water",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/Order"
                   }
                }
             ],
             "responses": {
                "200": {
                   "description": "successful operation",
                   "schema": {
                      "$ref": "#/definitions/Order"
                   }
                },
                "400": {
                   "description": "Invalid Order"
                }
             }
          }
       },
       "/store/order/{orderId}": {
          "get": {
             "tags": [
                "store"
             ],
             "summary": "Find purchase order by ID",
             "description": "For valid response try integer IDs with value >= 1 and <= 10.\\\n\\ Other values will generated exceptions",
             "operationId": "getOrderById",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "name": "orderId",
                   "in": "path",
                   "description": "ID of water that needs to be fetched",
                   "required": true,
                   "type": "integer",
                   "maximum": 10,
                   "minimum": 1,
                   "format": "int64"
                }
             ],
             "responses": {
                "200": {
                   "description": "successful operation",
                   "schema": {
                      "$ref": "#/definitions/Order"
                   }
                },
                "400": {
                   "description": "Invalid ID supplied"
                },
                "404": {
                   "description": "Order not found"
                }
             }
          },
          "delete": {
             "tags": [
                "store"
             ],
             "summary": "Delete purchase order by ID",
             "description": "For valid response try integer IDs with positive integer value.\\\n\\ Negative or non-integer values will generate API errors",
             "operationId": "deleteOrder",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "name": "orderId",
                   "in": "path",
                   "description": "ID of the order that needs to be deleted",
                   "required": true,
                   "type": "integer",
                   "minimum": 1,
                   "format": "int64"
                }
             ],
             "responses": {
                "400": {
                   "description": "Invalid ID supplied"
                },
                "404": {
                   "description": "Order not found"
                }
             }
          }
       },
       "/user": {
          "post": {
             "tags": [
                "user"
             ],
             "summary": "Create user",
             "description": "This can only be done by the logged in user.",
             "operationId": "createUser",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "body",
                   "description": "Created user object",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/User"
                   }
                }
             ],
             "responses": {
                "default": {
                   "description": "successful operation"
                }
             }
          }
       },
       "/user/createWithArray": {
          "post": {
             "tags": [
                "user"
             ],
             "summary": "Creates list of users with given input array",
             "operationId": "createUsersWithArrayInput",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "body",
                   "description": "List of user object",
                   "required": true,
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/User"
                      }
                   }
                }
             ],
             "responses": {
                "default": {
                   "description": "successful operation"
                }
             }
          }
       },
       "/user/createWithList": {
          "post": {
             "tags": [
                "user"
             ],
             "summary": "Creates list of users with given input array",
             "operationId": "createUsersWithListInput",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "body",
                   "description": "List of user object",
                   "required": true,
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/User"
                      }
                   }
                }
             ],
             "responses": {
                "default": {
                   "description": "successful operation"
                }
             }
          }
       },
       "/user/login": {
          "get": {
             "tags": [
                "user"
             ],
             "summary": "Logs user into the system",
             "operationId": "loginUser",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "name": "username",
                   "in": "query",
                   "description": "The user name for login",
                   "required": true,
                   "type": "string"
                },
                {
                   "name": "password",
                   "in": "query",
                   "description": "The password for login in clear text",
                   "required": true,
                   "type": "string"
                }
             ],
             "responses": {
                "200": {
                   "description": "successful operation",
                   "schema": {
                      "type": "string"
                   },
                   "headers": {
                      "X-Rate-Limit": {
                         "type": "integer",
                         "format": "int32",
                         "description": "calls per hour allowed by the user"
                      },
                      "X-Expires-After": {
                         "type": "string",
                         "format": "date-time",
                         "description": "date in UTC when token expires"
                      }
                   }
                },
                "400": {
                   "description": "Invalid username/password supplied"
                }
             }
          }
       },
       "/user/logout": {
          "get": {
             "tags": [
                "user"
             ],
             "summary": "Logs out current logged in user session",
             "operationId": "logoutUser",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [],
             "responses": {
                "default": {
                   "description": "successful operation"
                }
             }
          }
       },
       "/user/{username}": {
          "get": {
             "tags": [
                "user"
             ],
             "summary": "Get user by user name",
             "operationId": "getUserByName",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "name": "username",
                   "in": "path",
                   "description": "The name that needs to be fetched. Use user1 for testing.",
                   "required": true,
                   "type": "string"
                }
             ],
             "responses": {
                "200": {
                   "description": "successful operation",
                   "schema": {
                      "$ref": "#/definitions/User"
                   }
                },
                "400": {
                   "description": "Invalid username supplied"
                },
                "404": {
                   "description": "User not found"
                }
             }
          },
          "put": {
             "tags": [
                "user"
             ],
             "summary": "Updated user",
             "description": "This can only be done by the logged in user.",
             "operationId": "updateUser",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "name": "username",
                   "in": "path",
                   "description": "name that need to be updated",
                   "required": true,
                   "type": "string"
                },
                {
                   "in": "body",
                   "name": "body",
                   "description": "Updated user object",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/User"
                   }
                }
             ],
             "responses": {
                "400": {
                   "description": "Invalid user supplied"
                },
                "404": {
                   "description": "User not found"
                }
             }
          },
          "delete": {
             "tags": [
                "user"
             ],
             "summary": "Delete user",
             "description": "This can only be done by the logged in user.",
             "operationId": "deleteUser",
             "produces": [
                "application/json",
                "application/xml"
             ],
             "parameters": [
                {
                   "name": "username",
                   "in": "path",
                   "description": "The name that needs to be deleted",
                   "required": true,
                   "type": "string"
                }
             ],
             "responses": {
                "400": {
                   "description": "Invalid username supplied"
                },
                "404": {
                   "description": "User not found"
                }
             }
          }
       }
    },
    "securityDefinitions": {
       "waterstore_auth": {
          "type": "oauth2",
          "authorizationUrl": "http://waterstore.swagger.io/oauth/dialog",
          "flow": "implicit",
          "scopes": {
             "write:waters": "modify waters in your account",
             "read:waters": "read your waters"
          }
       },
       "api_key": {
          "type": "apiKey",
          "name": "api_key",
          "in": "header"
       }
    },
    "definitions": {
       "Order": {
          "type": "object",
          "properties": {
             "id": {
                "type": "integer",
                "format": "int64"
             },
             "waterId": {
                "type": "integer",
                "format": "int64"
             },
             "quantity": {
                "type": "integer",
                "format": "int32"
             },
             "shipDate": {
                "type": "string",
                "format": "date-time"
             },
             "status": {
                "type": "string",
                "description": "Order Status",
                "enum": [
                   "placed",
                   "approved",
                   "delivered"
                ]
             },
             "complete": {
                "type": "boolean",
                "default": false
             }
          },
          "xml": {
             "name": "Order"
          }
       },
       "Category": {
          "type": "object",
          "properties": {
             "id": {
                "type": "integer",
                "format": "int64"
             },
             "name": {
                "type": "string"
             }
          },
          "xml": {
             "name": "Category"
          }
       },
       "User": {
          "type": "object",
          "properties": {
             "id": {
                "type": "integer",
                "format": "int64"
             },
             "username": {
                "type": "string"
             },
             "firstName": {
                "type": "string"
             },
             "lastName": {
                "type": "string"
             },
             "email": {
                "type": "string"
             },
             "password": {
                "type": "string"
             },
             "phone": {
                "type": "string"
             },
             "userStatus": {
                "type": "integer",
                "format": "int32",
                "description": "User Status"
             }
          },
          "xml": {
             "name": "User"
          }
       },
       "Tag": {
          "type": "object",
          "properties": {
             "id": {
                "type": "integer",
                "format": "int64"
             },
             "name": {
                "type": "string"
             }
          },
          "xml": {
             "name": "Tag"
          }
       },
       "water": {
          "type": "object",
          "required": [
             "name",
             "photoUrls"
          ],
          "properties": {
             "id": {
                "type": "integer",
                "format": "int64"
             },
             "category": {
                "$ref": "#/definitions/Category"
             },
             "name": {
                "type": "string",
                "example": "doggie"
             },
             "photoUrls": {
                "type": "array",
                "xml": {
                   "name": "photoUrl",
                   "wrapped": true
                },
                "items": {
                   "type": "string"
                }
             },
             "tags": {
                "type": "array",
                "xml": {
                   "name": "tag",
                   "wrapped": true
                },
                "items": {
                   "$ref": "#/definitions/Tag"
                }
             },
             "status": {
                "type": "string",
                "description": "water status in the store",
                "enum": [
                   "available",
                   "pending",
                   "sold"
                ]
             }
          },
          "xml": {
             "name": "water"
          }
       },
       "ApiResponse": {
          "type": "object",
          "properties": {
             "code": {
                "type": "integer",
                "format": "int32"
             },
             "type": {
                "type": "string"
             },
             "message": {
                "type": "string"
             }
          }
       }
    },
    "externalDocs": {
       "description": "Find out more about Swagger",
       "url": "http://swagger.io"
    },
    "host": "virtserver.swaggerhub.com",
    "basePath": "/ways2startup4/water_can_api/1.0.0",
    "schemes": [
       "https",
       "http"
    ]
 }